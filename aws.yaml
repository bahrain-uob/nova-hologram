Resources:
  CognitoAuth:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: LibraryUserPool

  WebAppHosting:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: HostedWebAppBucket

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
          - DomainName: HostedWebAppBucket.s3.amazonaws.com
            Id: S3Origin

  UploadLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: UploadReadingMaterial
      Handler: index.handler
      Role: <IAM Role>
      Code:
        S3Bucket: <Bucket Name>
        S3Key: <Key>
      Runtime: nodejs14.x

  GetFilesLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GetReadingMaterials
      Handler: index.handler
      Role: <IAM Role>
      Code:
        S3Bucket: <Bucket Name>
        S3Key: <Key>
      Runtime: nodejs14.x

  DeleteFilesLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DeleteReadingMaterials
      Handler: index.handler
      Role: <IAM Role>
      Code:
        S3Bucket: <Bucket Name>
        S3Key: <Key>
      Runtime: nodejs14.x

  ReadingMaterialsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ReadingMaterialsBucket

  ReadingMaterialsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ReadingMaterialsQueue

  TextExtractionLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TextExtractionLambda
      Handler: index.handler
      Role: <IAM Role>
      Code:
        S3Bucket: <Bucket Name>
        S3Key: <Key>
      Runtime: nodejs14.x

  ExtractedTextQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ExtractedTextQueue

  SaveExtractedTextLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SaveExtractedText
      Handler: index.handler
      Role: <IAM Role>
      Code:
        S3Bucket: <Bucket Name>
        S3Key: <Key>
      Runtime: nodejs14.x

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ExtractedTextData
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  NovaGeneratedContentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: NovaGeneratedContent

  InvokeNovaLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: InvokeNova
      Handler: index.handler
      Role: <IAM Role>
      Code:
        S3Bucket: <Bucket Name>
        S3Key: <Key>
      Runtime: nodejs14.x

  BedrockAccess:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AmazonBedrockRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole

  APIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: LibraryContentAPI

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
      Path: /
      RoleName: EC2ReadOnlyRole
      Tags:
        - Key: Environment
          Value: Production
  Api:
    Type: AWS::ApiGatewayV2::Api
    Properties: {}